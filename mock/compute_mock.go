// Code generated by MockGen. DO NOT EDIT.
// Source: compute.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockComputeService is a mock of ComputeService interface.
type MockComputeService struct {
	ctrl     *gomock.Controller
	recorder *MockComputeServiceMockRecorder
}

// MockComputeServiceMockRecorder is the mock recorder for MockComputeService.
type MockComputeServiceMockRecorder struct {
	mock *MockComputeService
}

// NewMockComputeService creates a new mock instance.
func NewMockComputeService(ctrl *gomock.Controller) *MockComputeService {
	mock := &MockComputeService{ctrl: ctrl}
	mock.recorder = &MockComputeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeService) EXPECT() *MockComputeServiceMockRecorder {
	return m.recorder
}

// Compute mocks base method.
func (m *MockComputeService) Compute(ctx context.Context, command string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compute", ctx, command)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compute indicates an expected call of Compute.
func (mr *MockComputeServiceMockRecorder) Compute(ctx, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compute", reflect.TypeOf((*MockComputeService)(nil).Compute), ctx, command)
}
